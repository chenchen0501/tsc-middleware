---
globs: main.py
---

# 🚨 API 文档同步提醒

## 强制规范

当您修改 [main.py](mdc:main.py) 中的任何 API 接口时，**必须同步更新** [API.md](mdc:API.md) 文档！

## 快速检查清单

修改接口后，立即检查：

✅ **新增端点** → 在 API.md 添加完整文档  
✅ **修改参数** → 更新请求体示例和参数说明  
✅ **修改响应** → 更新响应格式和示例  
✅ **修改路由** → 更新接口路径  
✅ **修改验证** → 更新参数约束说明  
✅ **删除接口** → 从 API.md 移除或标记废弃

## 文档更新模板

### 新增接口时

在 [main.py](mdc:main.py) 添加：

```python
@app.post("/print/new-feature")
def api_new_feature(job: NewFeatureJob):
    """新功能描述"""
    pass
```

立即在 [API.md](mdc:API.md) 添加：

```markdown
## POST /print/new-feature

新功能描述

### 请求体

\`\`\`json
{
"param1": "value1",
"param2": "value2"
}
\`\`\`

### 响应示例

\`\`\`json
{
"status": "ok",
"message": "操作成功"
}
\`\`\`

### 错误响应

\`\`\`json
{
"detail": "错误描述"
}
\`\`\`

### 使用示例

\`\`\`bash
curl -X POST http://localhost:8000/print/new-feature \
 -H "Content-Type: application/json" \
 -d '{"param1": "value1", "param2": "value2"}'
\`\`\`
```

### 修改参数时

如果修改了 Pydantic 模型：

```python
class PrintJob(BaseModel):
    text: str = Field(..., description="标签文本")
    qty: int = Field(1, ge=1, le=100)  # 修改了范围
```

必须在 [API.md](mdc:API.md) 中更新对应的参数说明：

```markdown
- `qty` (int): 打印数量，范围 1-100，默认为 1
```

## 为什么这很重要？

1. **团队协作**：其他开发者依赖 API 文档了解接口
2. **接口测试**：测试人员需要准确的参数和响应格式
3. **前端集成**：前端开发需要最新的接口定义
4. **问题排查**：文档与代码不一致会导致调试困难
5. **版本管理**：清晰的文档有助于 API 版本演进

## 不要犯的错误

❌ "等所有接口都改完再统一更新文档"  
❌ "只在代码注释里写，不更新 API.md"  
❌ "文档只写接口路径，不写请求示例"  
❌ "删除接口时忘记更新文档"

✅ 修改一个接口，立即更新对应文档  
✅ 代码和文档同时修改，一次性提交  
✅ 文档包含完整的请求/响应示例  
✅ 废弃的接口在文档中标记清楚

## 验证方法

提交代码前，问自己：

1. 我修改的接口在 API.md 中找得到吗？
2. 文档中的请求示例能直接复制使用吗？
3. 参数说明与 Pydantic 模型完全一致吗？
4. 响应格式的例子是最新的吗？

如果有任何一个答案是"否"，立即更新文档！
